// schemaTypes/emailSignupSection.ts
import {defineField, defineType} from 'sanity'
import {EnvelopeIcon} from '@sanity/icons'

export default defineType({
  name: 'emailSignupSection',
  title: 'Email Signup Section',
  type: 'object',
  icon: EnvelopeIcon,
  groups: [
    {name: 'content', title: 'Content', default: true},
    {name: 'form', title: 'Form Settings'},
    {name: 'layout', title: 'Layout'},
    {name: 'styling', title: 'Section & Heading Styling'},
    {name: 'decor', title: 'Decorative Shape'},
    {name: 'button', title: 'Button'},
  ],
  fields: [
    // ---------------- CONTENT ----------------
    defineField({
      name: 'heading',
      title: 'Heading',
      type: 'string',
      group: 'content',
      description: 'Big title shown above the form (e.g., “Get updates”).',
      validation: (r) => r.required().min(2).max(80),
      initialValue: 'Hungry for Updates? Sign Up Now!',
    }),
    defineField({
      name: 'subheading',
      title: 'Subheading (optional)',
      type: 'text',
      rows: 2,
      group: 'content',
      description: 'Short description below the heading.',
      validation: (r) => r.max(200),
    }),
    defineField({
      name: 'privacyNote',
      title: 'Privacy Note (optional)',
      type: 'text',
      rows: 2,
      group: 'content',
      description: 'Small note under the form (e.g., “No spam. Unsubscribe anytime.”).',
      validation: (r) => r.max(200),
    }),

    // ---------------- FORM SETTINGS ----------------
    defineField({
      name: 'formName',
      title: 'Form Name (Netlify)',
      type: 'string',
      group: 'form',
      description: 'Value used for Netlify form handling (hidden input "form-name").',
      validation: (r) => r.required(),
      initialValue: 'notify',
    }),
    defineField({
      name: 'showNameFields',
      title: 'Include First/Last Name Fields',
      type: 'boolean',
      group: 'form',
      description: 'Adds two name inputs above the email field.',
      initialValue: true,
    }),
    defineField({
      name: 'firstNamePlaceholder',
      title: 'First Name Placeholder',
      type: 'string',
      group: 'form',
      description: 'Placeholder text for the first name input.',
      hidden: ({parent}) => !parent?.showNameFields,
      initialValue: 'First name',
    }),
    defineField({
      name: 'lastNamePlaceholder',
      title: 'Last Name Placeholder',
      type: 'string',
      group: 'form',
      description: 'Placeholder text for the last name input.',
      hidden: ({parent}) => !parent?.showNameFields,
      initialValue: 'Last name',
    }),
    defineField({
      name: 'emailPlaceholder',
      title: 'Email Placeholder',
      type: 'string',
      group: 'form',
      description: 'Placeholder text for the email input.',
      initialValue: 'you@example.com',
    }),
    defineField({
      name: 'enableHoneypot',
      title: 'Enable Honeypot Field',
      type: 'boolean',
      group: 'form',
      description: 'Adds a hidden field to reduce spam.',
      initialValue: true,
    }),
    defineField({
      name: 'honeypotFieldName',
      title: 'Honeypot Field Name',
      type: 'string',
      group: 'form',
      description: 'Name of the hidden honeypot input.',
      hidden: ({parent}) => !parent?.enableHoneypot,
      initialValue: 'bot-field',
    }),
    defineField({
      name: 'successMessage',
      title: 'Success Message',
      type: 'string',
      group: 'form',
      description: 'Shown after successful submission (if not redirecting).',
      initialValue: 'Thanks! Please check your inbox.',
    }),
    defineField({
      name: 'errorMessage',
      title: 'Error Message',
      type: 'string',
      group: 'form',
      description: 'Shown if the submission fails.',
      initialValue: 'Oops—something went wrong. Please try again.',
    }),
    defineField({
      name: 'successRedirect',
      title: 'Success Redirect URL (optional)',
      type: 'url',
      group: 'form',
      description: 'If set, users are redirected here after success.',
      validation: (Rule) => Rule.uri({scheme: ['http', 'https']}),
    }),

    // Form input styling (from your CSS)
    defineField({
      name: 'inputBorderColor',
      title: 'Input Border Color',
      type: 'color',
      group: 'form',
      description: 'Border color for inputs.',
      options: {colorList: ['#8e24aa', '#1976d2', '#4fa8e0', '#212121']}, // pants-purple | pants-blue | river-blue | text-dark
    }),
    defineField({
      name: 'inputBorderWidth',
      title: 'Input Border Width (px)',
      type: 'number',
      group: 'form',
      description: 'Thickness of the input border.',
      initialValue: 3,
    }),
    defineField({
      name: 'inputBorderRadius',
      title: 'Input Border Radius (px)',
      type: 'number',
      group: 'form',
      description: 'Roundness of input corners.',
      initialValue: 25,
    }),
    defineField({
      name: 'inputPaddingY',
      title: 'Input Vertical Padding (px)',
      type: 'number',
      group: 'form',
      description: 'Top/bottom padding inside inputs.',
      initialValue: 12,
    }),
    defineField({
      name: 'inputPaddingX',
      title: 'Input Horizontal Padding (px)',
      type: 'number',
      group: 'form',
      description: 'Left/right padding inside inputs.',
      initialValue: 20,
    }),
    defineField({
      name: 'inputFontFamily',
      title: 'Input Font Family',
      type: 'string',
      group: 'form',
      description: 'Font used inside inputs.',
      options: {list: ['Baloo 2', 'Lilita One', 'Poppins', 'Patrick Hand']},
      initialValue: 'Baloo 2',
    }),
    defineField({
      name: 'inputFontSize',
      title: 'Input Font Size (em)',
      type: 'number',
      group: 'form',
      description: 'Base size for input text.',
      initialValue: 1.05,
    }),
    defineField({
      name: 'inputInsetShadow',
      title: 'Input Inset Shadow',
      type: 'string',
      group: 'form',
      description: 'CSS box-shadow string (e.g., "inset 2px 2px 3px rgba(0,0,0,0.2)").',
      initialValue: 'inset 2px 2px 3px rgba(0,0,0,0.2)',
    }),
    defineField({
      name: 'formGap',
      title: 'Form Row Gap (px)',
      type: 'number',
      group: 'form',
      description: 'Space between inputs and the button.',
      initialValue: 15,
    }),

    // ---------------- LAYOUT ----------------
    defineField({
      name: 'paddingY',
      title: 'Section Vertical Padding (px)',
      type: 'number',
      group: 'layout',
      description: 'Space above and below the section.',
      initialValue: 80,
    }),
    defineField({
      name: 'paddingX',
      title: 'Section Horizontal Padding (px)',
      type: 'number',
      group: 'layout',
      description: 'Left/right padding of the section.',
      initialValue: 20,
    }),
    defineField({
      name: 'formMaxWidth',
      title: 'Form Max Width (px)',
      type: 'number',
      group: 'layout',
      description: 'Max width of the form container.',
      initialValue: 550,
    }),

    // ---------------- SECTION & HEADING STYLING ----------------
    defineField({
      name: 'bgAngle',
      title: 'Background Gradient Angle (deg)',
      type: 'number',
      group: 'styling',
      description: 'Angle for the background gradient.',
      initialValue: 180,
      validation: (r) => r.min(0).max(360),
    }),
    defineField({
      name: 'bgColorStart',
      title: 'Background Gradient: Start',
      type: 'color',
      group: 'styling',
      description: 'Top color of the section gradient.',
      options: {colorList: ['#1976d2', '#4fa8e0', '#a0d2eb']}, // pants-blue | river-blue | sky-blue
    }),
    defineField({
      name: 'bgColorEnd',
      title: 'Background Gradient: End',
      type: 'color',
      group: 'styling',
      description: 'Bottom color of the section gradient.',
      options: {colorList: ['#4fa8e0', '#a0d2eb', '#1976d2']},
    }),

    // Heading tokens (mirrors your CTA h2 styling)
    defineField({
      name: 'headingFontFamily',
      title: 'Heading Font Family',
      type: 'string',
      group: 'styling',
      description: 'Font used for the heading.',
      options: {list: ['Lilita One', 'Baloo 2', 'Poppins', 'Patrick Hand']},
      initialValue: 'Lilita One',
    }),
    defineField({
      name: 'headingFontSize',
      title: 'Heading Font Size (em)',
      type: 'number',
      group: 'styling',
      description: 'Base size; CSS can still scale responsively.',
      initialValue: 2.5,
    }),
    defineField({
      name: 'headingLetterSpacing',
      title: 'Heading Letter Spacing (px)',
      type: 'number',
      group: 'styling',
      description: 'Extra spacing between heading letters.',
      initialValue: 0.5,
    }),
    defineField({
      name: 'headingFillColor',
      title: 'Heading Fill Color',
      type: 'color',
      group: 'styling',
      description: 'Main color of the heading text.',
      options: {colorList: ['#ffeb3b', '#ffa726', '#ff7043']}, // title-yellow | title-orange | red-orange
    }),
    defineField({
      name: 'headingStrokeColor',
      title: 'Heading Stroke Color',
      type: 'color',
      group: 'styling',
      description: 'Outline color around the heading.',
      options: {colorList: ['#212121']}, // text-dark
    }),
    defineField({
      name: 'headingStrokeWidth',
      title: 'Heading Stroke Width (px)',
      type: 'number',
      group: 'styling',
      description: 'Thickness of the outline around the heading text.',
      initialValue: 2,
    }),
    defineField({
      name: 'headingTextShadow',
      title: 'Heading Text Shadow',
      type: 'string',
      group: 'styling',
      description: 'CSS shadow, e.g. "2px 2px 0px rgba(0,0,0,0.15)".',
      initialValue: '2px 2px 0px rgba(0,0,0,0.15)',
    }),

    // ---------------- DECORATIVE SHAPE (the floating blob) ----------------
    defineField({
      name: 'blobColor',
      title: 'Blob Fill Color',
      type: 'color',
      group: 'decor',
      description: 'Color of the decorative blob.',
      options: {colorList: ['#a0d2eb', '#c0ca33', '#fb8c00']}, // sky-blue | dino-lime | dino-orange
    }),
    defineField({
      name: 'blobBorderColor',
      title: 'Blob Border Color',
      type: 'color',
      group: 'decor',
      description: 'Outline color of the blob.',
      options: {colorList: ['#212121']}, // text-dark
    }),
    defineField({
      name: 'blobBorderWidth',
      title: 'Blob Border Width (px)',
      type: 'number',
      group: 'decor',
      description: 'Thickness of the blob outline.',
      initialValue: 3,
    }),
    defineField({
      name: 'blobOpacity',
      title: 'Blob Opacity (0–1)',
      type: 'number',
      group: 'decor',
      description: 'Transparency of the blob.',
      initialValue: 0.7,
      validation: (r) => r.min(0).max(1),
    }),
    defineField({
      name: 'blobSize',
      title: 'Blob Size (px)',
      type: 'object',
      group: 'decor',
      description: 'Width/height of the blob (approx).',
      fields: [
        defineField({name: 'width', title: 'Width', type: 'number', initialValue: 60}),
        defineField({name: 'height', title: 'Height', type: 'number', initialValue: 60}),
      ],
    }),
    defineField({
      name: 'blobPosition',
      title: 'Blob Position (%)',
      type: 'object',
      group: 'decor',
      description: 'Rough position from the top/right of the section.',
      fields: [
        defineField({name: 'top', title: 'Top (%)', type: 'number', initialValue: 10}),
        defineField({name: 'right', title: 'Right (%)', type: 'number', initialValue: 10}),
      ],
    }),
    defineField({
      name: 'blobRotation',
      title: 'Blob Rotation (deg)',
      type: 'number',
      group: 'decor',
      description: 'Rotate the blob for a playful angle.',
      initialValue: -25,
    }),

    // ---------------- BUTTON (REUSABLE STYLE + OVERRIDES) ----------------
    defineField({
      name: 'buttonLabel',
      title: 'Button Label',
      type: 'string',
      group: 'button',
      description: 'Text shown on the submit button (e.g., “Subscribe”).',
      validation: (r) => r.required().min(1).max(30),
      initialValue: 'Subscribe',
    }),
    defineField({
      name: 'buttonStyle',
      title: 'Base Button Style',
      type: 'reference',
      to: [{type: 'buttonStyle'}],
      group: 'button',
      description: 'Select a saved Button Style (e.g., “Primary”).',
      validation: (r) => r.required(),
    }),
    defineField({
      name: 'buttonOverride',
      title: 'Button Style Override (optional)',
      type: 'buttonStyleOverride',
      group: 'button',
      description: 'Override specific button style fields for this section only.',
    }),
    defineField({
      name: 'buttonMaxWidth',
      title: 'Button Max Width (px)',
      type: 'number',
      group: 'button',
      description: 'Cap the button width (helps with centering in a column layout).',
      initialValue: 320,
    }),
    defineField({
      name: 'buttonFullWidth',
      title: 'Make Button Full Width',
      type: 'boolean',
      group: 'button',
      description: 'When enabled, the button stretches to the available width (up to its max).',
      initialValue: true,
    }),
  ],
  preview: {
    select: {title: 'heading', form: 'formName', showNames: 'showNameFields'},
    prepare({title, form, showNames}) {
      const bits = [form && `form: ${form}`, showNames ? 'name fields' : null].filter(Boolean)
      return {
        title: title || 'Email Signup Section',
        subtitle: bits.join(' • ') || 'Email capture',
      }
    },
  },
})
